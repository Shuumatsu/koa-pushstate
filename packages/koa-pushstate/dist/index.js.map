{"version":3,"sources":["../src/index.js"],"names":["app","opts","key","readFileSync","resolve","__dirname","cert","root","process","argv","use","defaultResolveFilePath","setHeaders","res","path","stat","setHeader","index","join","fallthrough","server","createServer","callback","runServer","listen","port","console","log","yellow","then","question","change"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,mBAAZ;AACA,IAAMC,OAAO;AACXC,OAAK,aAAGC,YAAH,CAAgB,eAAKC,OAAL,CAAaC,SAAb,EAAwB,YAAxB,CAAhB,CADM;AAEXC,QAAM,aAAGH,YAAH,CAAgB,eAAKC,OAAL,CAAaC,SAAb,EAAwB,aAAxB,CAAhB;AAFK,CAAb;;AAKA,IAAME,OAAOC,QAAQC,IAAR,CAAa,CAAb,KAAmB,GAAhC;AACAT,IAAIU,GAAJ,CAAQH,IAAR,EAAc,iCAAUI,sBAAxB,EAAgD;AAC9CC,cAAY,oBAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAqB;AAC/BF,QAAIG,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACD,GAH6C;AAI9CC,SAAO,eAAKC,IAAL,CAAUX,IAAV,EAAgB,YAAhB,CAJuC;AAK9CY,eAAa;AALiC,CAAhD;;AAQA,IAAMC,SAAS,gBAAMC,YAAN,CAAmBpB,IAAnB,EAAyBD,IAAIsB,QAAJ,EAAzB,CAAf;AACA,IAAMC,YAAY,SAAZA,SAAY,OAAQ;AACxBH,SAAOI,MAAP,CAAcC,IAAd,EAAoB,SAApB;AACAC,UAAQC,GAAR,CAAY,gBAAMC,MAAN,0CAAoDH,IAApD,CAAZ;AACD,CAHD;;AAKA,0BAAO,IAAP,EAAaI,IAAb,CAAkB,gBAAQ;AACxB,MAAIJ,SAAS,IAAb,EAAmB;AACjBF,cAAUE,IAAV;AACA;AACD;;AAED,MAAMK,WAAW,gBAAMF,MAAN,wDAAjB;;AAEA,wBAAOE,QAAP,EAAiB,IAAjB,EAAuBD,IAAvB,CAA4B,kBAAU;AACpCE,cAAUR,UAAUE,IAAV,CAAV;AACD,GAFD;AAGD,CAXD","file":"index.js","sourcesContent":["\n\nimport Koa from 'koa'\nimport https from 'https'\nimport path from 'path'\nimport fs from 'fs'\nimport chalk from 'chalk'\nimport detect from 'detect-port'\nimport pushState from 'koa-pushstate-middleware'\nimport prompt from 'react-dev-utils/prompt'\n\nconst app = new Koa()\nconst opts = {\n  key: fs.readFileSync(path.resolve(__dirname, '../key.pem')),\n  cert: fs.readFileSync(path.resolve(__dirname, '../cert.pem'))\n}\n\nconst root = process.argv[2] || '.'\napp.use(root, pushState.defaultResolveFilePath, {\n  setHeaders: (res, path, stat) => {\n    res.setHeader('Access-Control-Allow-Origin', '*')\n  },\n  index: path.join(root, 'index.html'),\n  fallthrough: false\n})\n\nconst server = https.createServer(opts, app.callback())\nconst runServer = port => {\n  server.listen(port, '0.0.0.0')\n  console.log(chalk.yellow(`Server is running https://localhost:${port}`))\n}\n\ndetect(5000).then(port => {\n  if (port === 5000) {\n    runServer(port)\n    return\n  }\n\n  const question = chalk.yellow(`Default port 5000 is in use. Change to another port?`)\n\n  prompt(question, true).then(change => {\n    change && runServer(port)\n  })\n})"]}