{"version":3,"sources":["../src/index.js"],"names":["debug","defaultResolveFilePath","reqPath","directory","paths","split","resolve","indexHtml","defer","test","resolveFilePath","Error","RegExp","ctx","next","path","startsWith","req","request","resp","response","method","status","set","filepath","ext","extname","stats","gzPath","err","contentType","size","body","createReadStream"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport mime from 'mime-types'\nimport {\n  fileStats,\n  ensureNoSlash\n} from 'koa-pushstate-utils'\nimport _debug from 'debug'\nconst debug = _debug('koa-pushstate-middleware')\n\nconst defaultResolveFilePath = (reqPath, directory) => {\n  const paths = ensureNoSlash(reqPath).split('/')\n\n  return path.resolve(directory, ...paths)\n}\n\nexport default ({directory, indexHtml = 'index.html', defer = false, test = /[\\s\\S]/, resolveFilePath = defaultResolveFilePath}) => {\n  if (!directory)\n    throw new Error('koa-pushstate-middleware: directory option is required')\n\n  if (typeof path !== 'string' && !path instanceof RegExp)\n    throw new Error('koa-pushstate-middleware: path option should be a string or regx')\n\n  if (typeof resolveFilePath !== 'function')\n    throw new Error('koa-pushstate-middleware: resolveFilePath option should be a function')\n\n  return async (ctx, next) => {\n    debug(`ctx.path: ${ctx.path}`)\n\n    const reqPath = ctx.path\n    if (typeof test === 'string' && !reqPath.startsWith(test))\n      return await next()\n    if (test instanceof RegExp && !test.test(reqPath))\n      return await next()\n\n    if (defer)\n      await next()\n\n    const req = ctx.request\n    const resp = ctx.response\n\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      resp.status = 403\n      resp.set('Allow', 'GET, HEAD')\n      resp.set('Content-Length', '0')\n      return\n    }\n\n    let filepath = resolveFilePath(reqPath, directory)\n    let ext = path.extname(filepath)\n\n    if (ext === '' || ext === '.html') {\n      filepath = path.resolve(directory, indexHtml)\n      ext = '.html'\n    }\n\n    debug(`filepath: ${filepath}`)\n\n    // detect file\n    let stats, gzPath\n    try {\n      stats = await fileStats(`${filepath}.gz`)\n      gzPath = `${filepath}.gz`\n    } catch (err) {\n      debug(`try to serve gz ver: ${err}`)\n    }\n\n    if (!stats) {\n      try {\n        stats = await fileStats(filepath)\n      } catch (err) {\n        debug(`not found: ${err}`)\n        resp.status = 404\n        await next()\n        return\n      }\n    }\n\n    filepath = gzPath || filepath\n\n    // const type = mime.lookup(filepath)\n    // const charset = mime.charsets.lookup(type)\n    // resp.set('Content-Type', `${type}${charset ? `; charset=${charset}` : ''}`)\n    resp.set('Content-Type', mime.contentType(ext))\n    resp.set('Content-Length', stats.size)\n\n    // write to resp\n    resp.body = fs.createReadStream(filepath)\n\n    if (!defer)\n      await next()\n  }\n}"]}