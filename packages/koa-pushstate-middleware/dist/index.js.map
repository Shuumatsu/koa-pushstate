{"version":3,"sources":["../src/index.js"],"names":["defaultResolveFilePath","root","reqPath","join","toLowerCase","middleware","resolveFilePath","opts","resolve","Error","ctx","next","setHeaders","fallthrough","index","req","request","res","response","method","status","set","normalizedPath","normalize","path","filepath","ext","extname","type","stream","on","forwardError","err","statusCode","body"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,IAAD,EAAOC,OAAP;AAAA,SAAmB,eAAKC,IAAL,CAAUF,IAAV,EAAgBC,OAAhB,EAAyBE,WAAzB,EAAnB;AAAA,CAA/B;;AAEA,IAAMC,aAAa,SAAbA,UAAa,CAACJ,IAAD,EAAOK,eAAP,EAAwBC,IAAxB,EAAiC;AAClDN,SAAO,eAAKO,OAAL,CAAaP,IAAb,CAAP;;AAEA,MAAI,CAACA,IAAL,EACE,MAAM,IAAIQ,KAAJ,CAAU,4CAAV,CAAN;;AAEF,MAAI,OAAOH,eAAP,KAA2B,UAA/B,EACE,MAAM,IAAIG,KAAJ,CAAU,uEAAV,CAAN;;AAEF;AAAA,iCAAO,WAAOC,GAAP,EAAYC,IAAZ,EAAqB;AAAA,UAClBC,UADkB,GACiBL,IADjB,CAClBK,UADkB;AAAA,UACNC,WADM,GACiBN,IADjB,CACNM,WADM;AAAA,UACOC,KADP,GACiBP,IADjB,CACOO,KADP;;;AAG1B,UAAMC,MAAML,IAAIM,OAAhB;AACA,UAAMC,MAAMP,IAAIQ,QAAhB;;AAEA;AACA,UAAIH,IAAII,MAAJ,KAAe,KAAf,IAAwBJ,IAAII,MAAJ,KAAe,MAA3C,EAAmD;AACjD,YAAIN,WAAJ,EACE,OAAOF,MAAP;;AAEFM,YAAIG,MAAJ,GAAa,GAAb;AACAH,YAAII,GAAJ,CAAQ;AACN,mBAAS,WADH;AAEN,4BAAkB;AAFZ,SAAR;AAIA;AACD;;AAED,UAAMC,iBAAiB,eAAKC,SAAL,CAAeR,IAAIS,IAAnB,CAAvB;AACA,UAAIC,WAAWnB,gBAAgBL,IAAhB,EAAsBqB,cAAtB,CAAf;AACA,UAAII,MAAM,eAAKC,OAAL,CAAaF,QAAb,CAAV;;AAEA,UAAIC,QAAQ,EAAR,IAAcA,QAAQ,OAA1B,EAAmC;AACjCD,mBAAW,eAAKjB,OAAL,CAAaP,IAAb,EAAmBa,KAAnB,CAAX;AACAY,cAAM,OAAN;AACD;;AAEDT,UAAIW,IAAJ,GAAWF,GAAX;AACA,UAAMG,SAAS,oBAAKd,GAAL,EAAUU,QAAV,EAAoBlB,IAApB,CAAf;;AAEAK,oBAAciB,OAAOC,EAAP,CAAU,SAAV,EAAqBlB,UAArB,CAAd;;AAEA,UAAImB,eAAe,KAAnB;AACAF,aAAOC,EAAP,CAAU,MAAV,EAAkB,YAAM;AACtB;AACAC,uBAAe,IAAf;AACD,OAHD;;AAKAF,aAAOC,EAAP,CAAU,OAAV,EAAmB,eAAO;AACxB,YAAIC,gBAAgBC,IAAIC,UAAJ,IAAkB,GAAtC,EACE,MAAMD,GAAN;;AAEFrB;AACD,OALD;;AAOAM,UAAIiB,IAAJ,GAAWL,MAAX;AACD,KA/CD;;AAAA;AAAA;AAAA;AAAA;AAgDD,CAzDD;;AA2DAxB,WAAWL,sBAAX,GAAoCA,sBAApC;;kBAEeK,U","file":"index.js","sourcesContent":["import path from 'path'\nimport send from 'send'\n\nconst defaultResolveFilePath = (root, reqPath) => path.join(root, reqPath).toLowerCase()\n\nconst middleware = (root, resolveFilePath, opts) => {\n  root = path.resolve(root)\n\n  if (!root)\n    throw new Error('koa-pushstate-middleware: root is required')\n\n  if (typeof resolveFilePath !== 'function')\n    throw new Error('koa-pushstate-middleware: resolveFilePath option should be a function')\n\n  return async (ctx, next) => {\n    const { setHeaders, fallthrough, index } = opts\n\n    const req = ctx.request\n    const res = ctx.response\n\n    // method not allowed\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      if (fallthrough)\n        return next()\n\n      res.status = 405\n      res.set({\n        'Allow': 'GET, HEAD',\n        'Content-Length': '0'\n      })\n      return\n    }\n\n    const normalizedPath = path.normalize(req.path)\n    let filepath = resolveFilePath(root, normalizedPath)\n    let ext = path.extname(filepath)\n\n    if (ext === '' || ext === '.html') {\n      filepath = path.resolve(root, index)\n      ext = '.html'\n    }\n\n    res.type = ext\n    const stream = send(req, filepath, opts)\n\n    setHeaders && stream.on('headers', setHeaders)\n\n    let forwardError = false\n    stream.on('file', () => {\n      // once file is determined, always forward error\n      forwardError = true\n    })\n\n    stream.on('error', err => {\n      if (forwardError || err.statusCode >= 500)\n        throw err\n\n      next()\n    })\n\n    res.body = stream\n  }\n}\n\nmiddleware.defaultResolveFilePath = defaultResolveFilePath\n\nexport default middleware"]}