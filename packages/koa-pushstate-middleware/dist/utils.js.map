{"version":3,"sources":["../src/utils.js"],"names":["errFirstCallbackToPromise","args","Promise","resolve","reject","callback","err","values","length","fn","ensureNoSlash","path","startsWith","slice","endsWith","ensureFile","access","filepath","constants","R_OK","fileStats","stat","defaultResolveFilePath","reqPath","directory","paths","split"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,gEAA4B,SAA5BA,yBAA4B,KAAM;AAC7C,SAAO,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AAClB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAoB;AAAA,2CAAXC,MAAW;AAAXA,gBAAW;AAAA;;AACnC,YAAID,GAAJ,EAAS;AACPF,iBAAOE,GAAP;AACA;AACD;;AAEDC,eAAOC,MAAP,GAAgB,CAAhB,GAAoBL,QAAQI,MAAR,CAApB,GAAsCJ,yBAAWI,MAAX,CAAtC;AACD,OAPD;;AASA,4BAAaE,EAAb,EAAiB,CAACJ,QAAD,CAAjB,mBAAgCJ,IAAhC;AACD,KAXM,CAAP;AAYD,GAbD;AAcD,CAfM;;AAiBA,IAAMS,wCAAgB,SAAhBA,aAAgB,OAAQ;AACnCC,OAAKC,UAAL,CAAgB,GAAhB,MAAyBD,OAAOA,KAAKE,KAAL,CAAW,CAAX,CAAhC;AACAF,OAAKG,QAAL,CAAc,GAAd,MAAuBH,OAAOA,KAAKE,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAA9B;;AAEA,SAAOF,IAAP;AACD,CALM;;AAOA,IAAMI,kCAAa,SAAbA,UAAa;AAAA,SAAYf,0BAA0B,aAAGgB,MAA7B,EAAqCC,QAArC,EAA+C,aAAGC,SAAH,CAAaC,IAA5D,CAAZ;AAAA,CAAnB;;AAEA,IAAMC,gCAAY,SAAZA,SAAY;AAAA,SAAYpB,0BAA0B,aAAGqB,IAA7B,EAAmCJ,QAAnC,CAAZ;AAAA,CAAlB;;AAEA,IAAMK,0DAAyB,SAAzBA,sBAAyB,CAACC,OAAD,EAAUC,SAAV,EAAwB;AAC5D,MAAMC,QAAQf,cAAca,OAAd,EAAuBG,KAAvB,CAA6B,GAA7B,CAAd;;AAEA;;AAEA,SAAO,eAAKvB,OAAL,wBAAaqB,SAAb,4BAA2BC,KAA3B,GAAP;AACD,CANM","file":"utils.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport { partialRight } from 'lodash/fp'\n\nexport const errFirstCallbackToPromise = fn => {\n  return (...args) => {\n    return new Promise((resolve, reject) => {\n      const callback = (err, ...values) => {\n        if (err) {\n          reject(err)\n          return\n        }\n\n        values.length > 1 ? resolve(values) : resolve(...values)\n      }\n\n      partialRight(fn)([callback])(...args)\n    })\n  }\n}\n\nexport const ensureNoSlash = path => {\n  path.startsWith('/') && (path = path.slice(1))\n  path.endsWith('/') && (path = path.slice(0, -1))\n\n  return path\n}\n\nexport const ensureFile = filepath => errFirstCallbackToPromise(fs.access)(filepath, fs.constants.R_OK)\n\nexport const fileStats = filepath => errFirstCallbackToPromise(fs.stat)(filepath)\n\nexport const defaultResolveFilePath = (reqPath, directory) => {\n  const paths = ensureNoSlash(reqPath).split('/')\n\n  // return path.resolve(directory, ...paths.slice(1))\n\n  return path.resolve(directory, ...paths)\n}"]}